# Operator presedence
    foo[], (), foo()
    foo.bar, foo@, foo$, foo!, foo!! 
    *, /, %, ^
    +, -
    &, |, <, >, <=, >=, ==, !=, &&, ||, ^^, <<, >>
    =, +=, -=, *=, /=, %=, ^=, &&=, ||=, ^^,= <<=, >>=

# Keywords (avg ~3.74) (total 27)
    (3) tag - defines a tag
    (3) mod - defines a module
    (3) use - use a certain module or item
    (4) comp - defines a compound
    (4) enum - defines a enum
    (4) prop - defines a property
    (3) def - defines a property or subroutines for a comp/enum
    (3) sub - defines a subroutine
    (4) this - current instance
    (4) type - current type
    (5) where - constrains generics
    (4) true - true value
    (5) false - false value
    (4) none - none value
    (2) if
    (4) elif
    (4) else
    (4) loop - infinite loop
    (5) while - while loop
    (3) for - for loop
    (4) each - each loop
    (5) match
    (4) next - continues the execution of a loop
    (4) jump - jumps to the specified label
    (3) ret - returns from a sub
    (3) try - tries to unwrap a "res"
    (3) has - checks if a type has a prop defined

# Basic types
    isize i8 i16 i32 i64, int = i32
    usize u8 u16 u32 u64, uint = u32
    bsize b8 b16 b32 b64, bool = b8
    f32 f64, float = f64
    c8 c16 c32, char = c32
    s8 s16 s32, str = s32
    any
    
# Basic tags
    #con - marks variable as constant
    #cmp - marks expression as compile time
    #pub - marks item as public
    #inl - marks "sub"/"var" to be inlined by the compiler
    #uni - unified "comp"
    #exh - exhaustive "match"
    #del - delay execution of a "local"
    #self - marks sub to act on a instance
    #rest - marks arg as a rest arg
    #os(os_name: str)
    #def(def_name: str, value: int)
    #if(def_name: str) #if(def_name: str, value: int)
    #bind(fn_name: str)
    #gen(gen_name: str)
    #req(header: str)