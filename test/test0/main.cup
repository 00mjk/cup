fn main() {
    ## generics
    # fn some_func<T, U, V>(arg: T) {}
    # struct SomeStruct<T, U, V>
    # enum SomeEnum<T, U, V>

    ## ptr<T>
    # deref with %
    # ref with ?

    ## break with value
    # let a = loop {
    #     break 2 + 2;
    # }

    ## string interpolation
    # "hello $a";

    ## match
    # match number {
    #     -1..1 -> println!("Some range!"),
    #     2 or 3 -> println!("Two or three!"),
    # }

    ## for in
    # for item in items {
    #     print(item);
    # }

    ## and, or

    ## null

    var a: int;
    let a: int;
    stc c: int;
    con d: int;

    ## to decide
    # static
    # const
    # self and Self
    # inheritance
    # labels
    # struct inititialization
    # errors
    # do/while
    # return or no return
    # macros
}

## did you mean 'some command' ?

## try compile with tcc, gcc, clang, msvc
# error when no compiler found
# notify what compiler is used

## combo declarations
# let a, b = 0, c;

## elif or else without if
# elif 5 { }
# else { }

## restrict expr to certain scopes
# struct, enum, fn - only globals
# rest only in functions

## analyze globals first

## fn checks
# 1. fn not defined 
# 2. fn already defined
# 3. wrong number of args in fn call

## check for types
# 1. fn return type
# 2. operator types
# 3. fn call types