comp MangledExpr (
    Expr expr,
    Path path,
    str name,
);

comp Use (
    bool is_mod,
    Path path,
    Path alias,
);

enum PathKind (
    Var,
    Type,
    Sub,
    Any,
);

int scope_index;
int scope_index2;
int mangle_index;
darr<darr<MangledExpr>> paths;
darr<Use> uses;
darr<PathPart> mods;
darr<str> local_vars;

sub init_analyzer() {
    scope_index = 1;
    mangle_index = 0;
    paths = darr<darr<MangledExpr>>:new_with_cap(4);
    uses = darr<Use>:new_with_cap(4);
    mods = darr<PathPart>:new_with_cap(4);
    local_vars = darr<str>:new_with_cap(8);
};

sub analyze_globals(File file, darr<Expr> exprs) {
    scope_index += 1;
    for i = 0, i < exprs.len, i += 1 {
        analyze_global(file, exprs[i]$);
    };
    scope_index -= 1;
};

sub analyze_global(File file, ptr<Expr> expr) {
    opt<Tag> pub = opt<Tag>:None;
    opt<Tag> bind = opt<Tag>:None;
    for i = 0, i < expr@.tags.len, i += 1 {
        Tag _tag = expr@.tags[i];
        if cmp_path_to_str(_tag.path, "pub") {
            if pub != opt<Tag>:None {
                file.throw(_tag.index, "only one #pub is allowed per path");
            };
            pub = opt<Tag>:Some(_tag);
        } elif cmp_path_to_str(_tag.path, "bind") {
            if bind != opt<Tag>:None {
                file.throw(_tag.index, "only one #bind is allowed per path");
            };
            bind = opt<Tag>:Some(_tag);
        };
    };

    ptr<Path> path;
    match expr@.kind {
        ExprKind:Block(darr<Expr> body) {
            analyze_globals(file, body);
            ret;
        },
        ExprKind:Mod(#ref Path _path, darr<Expr> body) {
            apply_pub_scope(pub, _path@, scope_index);
            darr<PathPart> old_mods = Path:clone(new Path { parts = mods }$).parts;
            mods.join(_path@.parts);
            Path old_path = Path:clone(_path);
            darr<PathPart>:join_back(_path@.parts$, old_mods);
            analyze_globals(file, body);
            mods.len = old_mods.len;
            uses.push(new Use {
                is_mod = true,
                path = Path:clone(_path),
                alias = old_path,
            });
            path = _path;
        },
        ExprKind:Use(Path _path, opt<Path> alias) {
            Path _alias;
            match alias {
                opt<Path>:Some(Path alias_path) {
                    _alias = alias_path;
                },
                _ {
                    _alias = new Path {
                        parts = darr<PathPart>:new_with_cap(1),
                        index = _path.index,
                    };
                    darr<PathPart>:push(_alias.parts$, _path.parts[_path.parts.len - 1]);
                },
            };
            if compare_paths(_path, _alias, false) == false {
                uses.push(new Use {
                    is_mod = false,
                    path = Path:clone(_path$),
                    alias = Path:clone(_alias$),
                });
            };
            ret;
        },
        ExprKind:Comp(#ref Path _path) {
            apply_pub_scope(pub, _path@, scope_index);
            Path old_path = Path:clone(_path);
            darr<PathPart>:join_back(_path@.parts$, mods);
            uses.push(new Use {
                is_mod = false,
                path = Path:clone(_path),
                alias = old_path,
            });
            path = _path;
        },
        ExprKind:Enum(#ref Path _path, darr<Expr> opts, darr<Expr> body) {
            apply_pub_scope(pub, _path@, scope_index);
            darr<PathPart> old_mods = Path:clone(new Path { parts = mods }$).parts;
            mods.join(_path@.parts);
            Path old_path = Path:clone(_path);
            darr<PathPart>:join_back(_path@.parts$, mods);
            analyze_globals(file, opts);
            mods.len = old_mods.len;
            uses.push(new Use {
                is_mod = false,
                path = Path:clone(_path),
                alias = old_path,
            });
            path = _path;
        },
        ExprKind:Def(Path _prop, _, darr<Expr> body) {
            apply_pub_scope(pub, _prop, scope_index);
            int old_mods_len = mods.len;
            mods.join(_prop.parts);
            analyze_globals(file, body);
            mods.len = old_mods_len;
        },
        ExprKind:SubDef(_, #ref Path _path) {
            apply_pub_scope(pub, _path@, scope_index);
            Path old_path = Path:clone(_path);
            darr<PathPart>:join_back(_path@.parts$, mods);
            uses.push(new Use {
                is_mod = false,
                path = Path:clone(_path),
                alias = old_path,
            });
            path = _path;
        },
        ExprKind:VarDef(opt<Path> _type, #ref Path _path) {
            apply_pub_scope(pub, _path@, scope_index);
            Path old_path = Path:clone(_path);
            darr<PathPart>:join_back(_path@.parts$, mods);
            uses.push(new Use {
                is_mod = false,
                path = Path:clone(_path),
                alias = old_path,
            });
            path = _path;
        },
        _ { ret; },
    };

    match pub {
        opt<Tag>:Some(Tag _tag) {
            match expr@.kind {
                ExprKind:Mod,
                ExprKind:Comp,
                ExprKind:Enum,
                ExprKind:Def,
                ExprKind:SubDef,
                ExprKind:VarDef {},
                _ {
                    file.throw(_tag.index, "#pub cannot be applied to this expr");
                },
            };
        },
    };

    bool gen = has_generics(path@);

    match bind {
        opt<Tag>:Some(Tag _tag) {
            match expr@.kind {
                ExprKind:Comp,
                ExprKind:Enum,
                ExprKind:SubDef,
                ExprKind:VarDef {
                    if gen {
                        file.throw(_tag.index, "#bind cannot be applied to generic expressions");
                    };
                },
                _ {
                    file.throw(_tag.index, "#bind cannot be applied to this expression");
                },
            };
        },
    };

    match expr@.kind {
        ExprKind:Comp,
        ExprKind:Enum,
        ExprKind:SubDef,
        ExprKind:VarDef {
            if path@.parts.len <= paths.len {
                if is_path_defined(path@) {
                    file.throw(path@.index, "path already defined");
                };
            };

            match bind {
                opt<Tag>:Some(Tag _tag) {
                    match expr@.kind {
                        ExprKind:Comp,
                        ExprKind:Enum,
                        ExprKind:SubDef,
                        ExprKind:VarDef {
                            if _tag.args.len != 1 {
                                file.throw(_tag.index, "#bind requires one argument of type string");
                            };
                            match _tag.args[0].kind {
                                ExprKind:StringLit(str value) {
                                    add_mangled_expr(expr@, path@, value);
                                },
                                _ {
                                    file.throw(_tag.index, "#bind requires one argument of type string");
                                },
                            };
                        },
                    };
                },
                opt<Tag>:None {
                    new_mangle(expr@, path@, false);
                },
            };
        },
    };
};

sub analyze_locals(File file, darr<Expr> exprs, bool clean_locals) {
    scope_index2 += 1;
    int old_local_vars_len = local_vars.len;
    for i = 0, i < exprs.len, i += 1 {
        analyze_local(file, exprs[i]$);
    };
    scope_index2 -= 1;
    if clean_locals {
        local_vars.len = old_local_vars_len;
    };
};

sub analyze_local(File file, ptr<Expr> expr) {
    match expr@.kind {
        ExprKind:Block(darr<Expr> body) {
            analyze_locals(file, body, false);
        },
        ExprKind:Mod(Path path, darr<Expr> body) {
            mods.len = 0;
            mods.join(path.parts);
            analyze_locals(file, body, false);
            mods.len = 0;
        },
        ExprKind:Use(#ref Path path) {
            apply_uses(path);
            check_path_defined_visible(file, path@, PathKind:Any);
        },
        ExprKind:Field(#ref Path _type, str name) {
            apply_uses(_type);
            check_path_defined_visible(file, _type@, PathKind:Type);
        },
        ExprKind:Comp(Path path, darr<Expr> fields, darr<Expr> body) {
            analyze_locals(file, fields, false);
            analyze_locals(file, body, false);
        },
        ExprKind:Enum(Path path, darr<Expr> opts, darr<Expr> body) {
            ` TODO: analyze_locals(file, opts);
            analyze_locals(file, body, false);
        },
        ExprKind:Prop(Path path, darr<Expr> body) {
            analyze_locals(file, body, false);
        },
        ExprKind:Def(#ref Path _prop, #ref opt<Path> target, darr<Expr> body) {
            apply_uses(_prop);
            check_path_defined_visible(file, _prop@, PathKind:Type);
            match target@ {
                opt<Path>:Some(#ref Path _target) {
                    apply_uses(_target);
                    check_path_defined_visible(file, _target@, PathKind:Type);
                },
            };
            analyze_locals(file, body, false);
        },
        ExprKind:SubDef(opt<Path> ret_type, Path path, darr<Expr> args, darr<Expr> body) {
            match ret_type {
                opt<Path>:Some(#ref Path _ret_type) {
                    apply_uses(_ret_type);
                    check_path_defined_visible(file, _ret_type@, PathKind:Type);
                },
            };
            analyze_locals(file, args, false);
            analyze_locals(file, body, true);
        },
        ExprKind:VarDef(#ref opt<Path> _type, Path path, #ref opt<ptr<Expr>> value) {
            match _type@ {
                opt<Path>:Some(#ref Path __type) {
                    apply_uses(__type);
                    check_path_defined_visible(file, __type@, PathKind:Type);
                },
            };
            match value@ {
                opt<ptr<Expr>>:Some(ptr<Expr> _value) {
                    analyze_local(file, _value);
                },
            };
        },
        ExprKind:LocalVarDef(#ref opt<Path> _type, str name, #ref opt<ptr<Expr>> value) {
            match _type@ {
                opt<Path>:Some(#ref Path __type) {
                    apply_uses(__type);
                    check_path_defined_visible(file, __type@, PathKind:Type);
                },
            };
            local_vars.push(name);
            match value@ {
                opt<ptr<Expr>>:Some(ptr<Expr> _value) {
                    analyze_local(file, _value);
                },
            };
        },
        ExprKind:SubCall(#ref Path path, darr<Expr> args) {
            apply_uses(path);
            analyze_locals(file, args, false);
        },
        ExprKind:VarUse(#ref Path path) {
            apply_uses(path);
            check_path_defined_visible(file, path@, PathKind:Var);
        },
        ExprKind:LocalBlock(darr<Expr> body) {
            analyze_locals(file, body, true);
        },
        ExprKind:If(IfBranch _if, darr<IfBranch> _elif, opt<ElseBranch> _else) {
            analyze_local(file, _if.cond);
            analyze_locals(file, _if.body, true);
            for i = 0, i < _elif.len, i += 1 {
                analyze_local(file, _elif[i].cond);
                analyze_locals(file, _elif[i].body, true);
            };
            match _else {
                opt<ElseBranch>:Some(ElseBranch __else) {
                    analyze_locals(file, __else.body, true);
                },
            };
        },
        ExprKind:Loop(darr<Expr> body) {
            analyze_locals(file, body, true);
        },
        ExprKind:While(ptr<Expr> cond, darr<Expr> body) {
            analyze_local(file, cond);
            analyze_locals(file, body, true);
        },
        ExprKind:For(str iter, opt<ptr<Expr>> iter_value, ptr<Expr> cond, ptr<Expr> _next, darr<Expr> body) {
            int old_local_vars_len = local_vars.len;
            local_vars.push(iter);
            match iter_value {
                opt<ptr<Expr>>:Some(ptr<Expr> _iter_value) {
                    analyze_local(file, _iter_value);
                },
            };
            analyze_local(file, cond);
            analyze_local(file, _next);
            analyze_locals(file, body, false);
            local_vars.len = old_local_vars_len;
        },
        ExprKind:Each(darr<str> vars, ptr<Expr> iter, darr<Expr> body) {
            analyze_local(file, iter);
            analyze_locals(file, body, true);
        },
        ExprKind:Match(ptr<Expr> value, darr<Expr> cases) {
            analyze_local(file, value);
            analyze_locals(file, cases, false);
        },
        ExprKind:Case(darr<Expr> values, darr<Expr> body) {
            ` TODO: values
            analyze_locals(file, body, true);
        },
        ExprKind:Echo(ptr<Expr> value) {
            analyze_local(file, value);
        },
        ExprKind:Ret(opt<str> label, opt<ptr<Expr>> value) {
            match value {
                opt<ptr<Expr>>:Some(ptr<Expr> _value) {
                    analyze_local(file, _value);
                },
            };
        },
        ExprKind:Try(opt<str> label, ptr<Expr> value) {
            analyze_local(file, value);
        },
        ExprKind:UnaryOp(ptr<Expr> value, TokenKind kind) {
            analyze_local(file, value);
        },
        ExprKind:BinaryOp(ptr<Expr> lhs, ptr<Expr> rhs, TokenKind kind) {
            analyze_local(file, lhs);
            analyze_local(file, rhs);
        },
        ExprKind:TernaryOp(ptr<Expr> cond, ptr<Expr> valueA, ptr<Expr> valueB) {
            analyze_local(file, cond);
            analyze_local(file, valueA);
            analyze_local(file, valueB);
        },
    };
};

bool is_path_defined(Path path) {
    if path.parts.len <= paths.len {
        darr<MangledExpr> len_paths = paths[path.parts.len - 1];
        for i = 0, i < len_paths.len, i += 1 {
            if compare_paths(path, len_paths[i].path, false) {
                ret true;
            };
        };
    };
    ret false;
};

bool has_generics(Path path) {
    for i = 0, i < path.parts.len, i += 1 {
        if path.parts[i].gens.len > 0 {
            ret true;
        };
    };
    ret false;
};

sub apply_scope(Path path, int scope) {
    for i = 0, i < path.parts.len, i += 1 {
        path.parts[i].scope = scope;
    };
};

sub apply_pub_scope(opt<Tag> pub, Path path, int scope) {
    bool _pub = pub != opt<Tag>:None;
    for i = 0, i < path.parts.len, i += 1 {
        if _pub {
            path.parts[i].pub = true;
        };
        path.parts[i].scope = scope;
    };
};

sub apply_uses(ptr<Path> path) {
    for i = 0, i < path@.parts.len, i += 1 {
        for ii = 0, ii < path@.parts[i].gens.len, ii += 1 {
            match path@.parts[i].gens[ii].kind {
                ExprKind:VarUse(#ref Path gen) {
                    apply_uses(gen);      
                },
            };
        };
    };

    ~l loop {
        ~ll for i = 0, i < uses.len, i += 1 {
            if uses[i].is_mod {
                if path@.parts.len >= uses[i].alias.parts.len {
                    for ii = 0, ii < uses[i].alias.parts.len, ii += 1 {
                        if cstr:cmp(uses[i].alias.parts[ii].name.buf, path@.parts[ii].name.buf) != 0 {
                            next ~ll;
                        };
                    };
                    for ii = 0, ii < uses[i].alias.parts.len, ii += 1 {
                        darr<PathPart>:pop_back(path@.parts$);
                    };
                    darr<PathPart>:join_back(path@.parts$, uses[i].path.parts);
                    next ~l;
                };
            } elif compare_paths(path@, uses[i].alias, true) {
                path@.parts.len = 0;
                darr<PathPart>:join(path@.parts$, uses[i].path.parts);
            };
        };
        ret;
    };
};

sub check_path_defined_visible(File file, Path path, PathKind kind) {
    if (path.parts.len == 1) & path.parts[0].gens.len == 0 & ((kind == PathKind:Any) | (kind == PathKind:Var)) {
        for i = 0, i < local_vars.len, i += 1 {
            if cstr:cmp(path.parts[0].name.buf, local_vars[i].buf) == 0 {
                ret;
            };
        };
    };
    if path.parts.len <= paths.len {
        darr<MangledExpr> len_paths = paths[path.parts.len - 1];
        for i = 0, i < len_paths.len, i += 1 {
            Path other = len_paths[i].path;
            if compare_paths(path, other, false) {
                if kind != PathKind:Any {
                    if kind == PathKind:Var {
                        if len_paths[i].expr.kind != ExprKind:VarDef {
                            file.throw(path.index, "expected a variable");
                        };
                    }
                    elif kind == PathKind:Type {
                        if (len_paths[i].expr.kind != ExprKind:Comp) & (len_paths[i].expr.kind != ExprKind:Enum) {
                            file.throw(path.index, "expected a type");
                        };
                    }
                    elif kind == PathKind:Sub {
                        if len_paths[i].expr.kind != ExprKind:SubDef {
                            file.throw(path.index, "expected a subroutine");
                        };
                    };
                };
                bool same_mods = true;
                ~l for i = 0, i < path.parts.len, i += 1 {
                    if (i < mods.len) & (cstr:cmp(other.parts[i].name.buf, mods[i].name.buf) == 0) {
                        next ~l;
                    };
                    if same_mods {
                        while other.parts[i].scope == scope_index2 {
                            i += 1;
                        };
                        same_mods = false;
                        i -= 1;
                        next ~l;
                    };
                    if other.parts[i].pub {
                        next ~l;
                    };
                    file.throw(path.index, "path is not public or in current scope");
                };
                ret;
            };
        };
    };
    file.throw(path.index, "path not defined");
};

str new_mangle(Expr expr, Path path, bool gens) {
    while path.parts.len > paths.len {
        paths.push(darr<MangledExpr>:new_with_cap(16));
    };

    dstr n = mangle_from_index(mangle_index += 1, false);
    str name = dstr:to_str(n$);

    darr<MangledExpr>:push(paths[path.parts.len - 1]$, new MangledExpr {
        expr = expr,
        path = path,
        name = name,
    });

    ret name;
};

dstr mangle_from_index(int index, bool local) {
    dstr _name = dstr:new_with_cap(4);
    
    _name.push('_');
    if local {
        _name.push('_');
    };

    while index > 0 {
        int i = index % 62;
        if i < 10 {
            i += 48;
        } elif i < 36 {
            i += 55;
        } else {
            i += 61;
        };
        _name.push(i);
        index /= 62;
    };

    ret _name;
};

bool cmp_path_to_str(Path path, ptr<u8> name) {
    ret (path.parts.len == 1) & (cstr:cmp(path.parts[0].name.buf, name) == 0);
};

bool compare_paths(Path a, Path b, bool gens) {
    if a.parts.len != b.parts.len {
        ret false;
    };
    
    ~l for i = 0, i < a.parts.len, i += 1 {
        PathPart aPart = a.parts[i];
        PathPart bPart = b.parts[i];
        if cstr:cmp(aPart.name.buf, bPart.name.buf) == 0 {
            if (gens == false) | compare_gens(aPart.gens, bPart.gens) {
                next ~l;
            };
        };
        ret false;
    };
    ret true;
};

bool compare_gens(darr<Expr> a, darr<Expr> b) {
    if a.len != b.len {
        ret false;
    };

    for i = 0, i < a.len, i += 1 {
        match a[i].kind {
            ExprKind:VarUse(Path pathA) {
                match b[i].kind {
                    ExprKind:VarUse(Path pathB) {
                        if compare_paths(pathA, pathB, true) == false {
                            ret false;
                        };
                    },
                    _ {
                        ret false;
                    },
                };
            },
            _ {
                ret false;
            },
        };
    };
    ret true;
};

sub add_mangled_expr(Expr expr, Path path, str name) {
    while path.parts.len > paths.len {
        paths.push(darr<MangledExpr>:new_with_cap(16));
    };
    darr<MangledExpr>:push(paths[path.parts.len - 1]$, new MangledExpr {
        expr = expr,
        path = path,
        name = name,
    });
};