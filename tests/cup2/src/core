`` mod op {
``     #once trait Add {
``         This add (This lhs, This rhs);
``     };
`` 
``     #once trait AddAssign {
``         #self This add_assign(This rhs);
``     };
`` };

#bind("int")          #pub comp isize ();
#bind("unsigned int") #pub comp usize ();
#bind("int")          #pub comp bsize ();

use i32 as int;
use u32 as uint;

#req("stdint.h")
{
    #bind("int8_t")   #pub comp i8   ();
    #bind("int16_t")  #pub comp i16  ();
    #bind("int32_t")  #pub comp i32  ();
    #bind("int64_t")  #pub comp i64  ();

    #bind("uint8_t")  #pub comp u8   ();
    #bind("uint16_t") #pub comp u16  ();
    #bind("uint32_t") #pub comp u32  ();
    #bind("uint64_t") #pub comp u64  ();

    #bind("uint32_t") #pub comp char ();
};

sum bool (
    comp True  (),
    comp False (),
);

use f64 as float;

#bind("float") #pub comp f32 ();
#bind("double") #pub comp f64 ();

`` mod mem {
``     comp ptr ();
``     
``     #req("stdlib.h") {
``         #bind("malloc")
``         #pub ptr alloc (isize size);
`` 
``         #bind("realloc")
``         #pub ptr realloc (ptr block, isize size);
``     };
`` 
``     #req("string.h")
``     {
``         #bind("memcpy")
``         #pub proc copy (ptr dest, ptr src, isize size);
`` 
``         #bind("memmove")
``         #pub proc move (ptr dest, ptr src, isize size);
``     };
`` 
``     #pub isize size<type T> (); 
`` };
`` 
`` comp ref<type T> (ptr buf) {
``     #pub ref<T> alloc () {
``         ret mem:alloc(mem:size<T>()) as ref<T>;
``     };
`` };

#pub comp ptr<type T> ();

#pub comp str (
    ptr<char> buf,
    int       len,
);

#pub comp arr<type T> (
    ptr<T> buf,
    int    len,
);

#req("stdio.h")
#bind("printf")
#pub proc fmt:print ();

`` comp arr<type T> (
``     mem:ptr buf,
``     int len,
`` ) {
``     arr<T> new_with_len (int len) {
``         ret arr<T>(mem:alloc_bytes(mem:size<T>() * len), len);
``     };
`` 
``     arr<T> new_from_ptr (c:ptr buf, int len) {
``         ret arr<T>(buf, len);
``     };
`` 
``     #self darr<T> to_darr () {
``         ret darr<T>(this.buf, this.len, this.len);
``     };
`` };
`` 
`` def op:Index<T> for arr<type T> {
``     #self T index(int i) {
``         ret this.buf[i] as ref<T>;
``     };
`` };
`` 
`` def op:Index<ref<T>> for ref<arr<type T>> {
``     #self ref<T> index(int i) {
``         ret this.buf[i] as ref<T>;
``     };
`` };
`` 
`` comp darr<type T> (
``     mem:ptr buf,
``     int len,
``     int cap,
`` ) {
``     darr<T> new_with_cap (int cap) {
``         ret darr<T>(mem:alloc_bytes(mem:size<T>() * cap), 0, cap);
``     };
`` 
``     #self proc push (T item) {
``         this[this.len] = item;
``         this.len += 1;
`` 
``         if this.len == this.cap {
``             this.cap *= 4;
``             this.buf = mem:realloc(this.buf, mem:size<T>() * this.cap);
``         };
``     };
`` 
``     #self proc push_back (T item) {
``         this.len += 1;
`` 
``         if this.len == this.cap {
``             this.cap *= 4;
``             this.buf = mem:realloc(this.buf, mem:size<T>() * this.cap);
``         };
`` 
``         mem:move(this.buf + 1, this.buf, mem:size<T>() * (this.len - 1));
``         this[0] = item;
``     };
`` 
``     #self T pop () {
``         this.len -= 1;
``         ret this[this.len];
``     };
`` 
``     #self T pop_back () {
``         T item = this[0];
``         this.len -= 1;
``         mem:move(this.buf, this.buf + 1, mem:size<T>() * this.len);
``         ret item;    
``     };
`` 
``     #self proc join (darr<T> other) {
``         if other.len == 0 {
``             ret;
``         };
``         int old_len = this.len;
``         this.len += other.len;
``         while this.len >= this.cap {
``             this.cap *= 4;
``             this.buf = mem:realloc(this.buf, mem:size<T>() * this.cap);
``         };
``         mem:copy(this.buf + old_len, other.buf, mem:size<T>() * other.len);
``     };
`` 
``     #self proc join_back (darr<T> other) {
``         if other.len == 0 {
``             ret;
``         };
``         int old_len = this.len;
``         this.len += other.len;
``         while this.len >= this.cap {
``             this.cap *= 4;
``             this.buf = mem:realloc(this.buf, mem:size<T>() * this.cap);
``         };
``         mem:move(this.buf + other.len, this.buf, mem:size<T>() * old_len);
``         mem:copy(this.buf, other.buf, mem:size<T>() * other.len);
``     };
`` 
``     #self arr<T> to_arr () {
``         ret arr<T>(this.buf, this.len);
``     };
`` };
`` 
`` def op:Index<T> for darr<type T> {
``     #self T index(int i) {
``         ret this.buf[i] as ref<T>;
``     };
`` };
`` 
`` def op:Index<ref<T>> for darr<arr<type T>> {
``     #self ref<T> index(int i) {
``         ret this.buf[i] as ref<T>;
``     };
`` };