darr<str> reqs;
dstr types_headers;
dstr funcs_headers;
dstr variables;
dstr types;
dstr funcs;

comp GenericInstance (
    str name,
    Expr expr,
);

darr<GenericInstance> gens;

sub generate(str output, darr<Expr> ast) {
    reqs = darr<str>:new_with_cap(4);
    types_headers = dstr:new_with_cap(256);
    funcs_headers = dstr:new_with_cap(256);
    variables = dstr:new_with_cap(512); 
    types = dstr:new_with_cap(1024);
    funcs = dstr:new_with_cap(1024);
    gens = darr<GenericInstance>:new_with_cap(4);
    generate_expr_vec(0, ast, false, false, false);
    types_headers[types_headers.len] = '\0';
    funcs_headers[funcs_headers.len] = '\0';
    variables[variables.len] = '\0';
    types[types.len] = '\0';
    funcs[funcs.len] = '\0';

    ptr<file> file_point = file:open(output.buf, "w");
    for i = 0, (i) < reqs.len, i += 1 {
        file:print(file_point, "#include %c%s%c\n", 34, reqs[i].buf, 34);
    };
    file:print(file_point, "%s", types_headers.buf);
    file:print(file_point, "%s", funcs_headers.buf);
    file:print(file_point, "%s", variables.buf);
    file:print(file_point, "%s", types.buf);
    file:print(file_point, "%s", funcs.buf);
    file:close(file_point);
};

sub generate_expr_vec(ptr<dstr> out, darr<Expr> exprs, bool semicolon, bool comma, bool clean_locals) {
    int old_local_vars_len = local_vars.len;
    for i = 0, i < exprs.len, i += 1 {
        bool is_last = (i + 1) == exprs.len;
        generate_expr(out, exprs[i], is_last, semicolon, 0);
        if comma & (is_last == false) {
            dstr:push(out, ',');
        };
    };
    if clean_locals {
        local_vars.len = old_local_vars_len;
    };
};

sub generate_expr(ptr<dstr> out, Expr expr, bool last, bool semicolon, int parens) {
    for i = 0, i < expr.tags.len, i += 1 {
        if cmp_path_to_str(expr.tags[i].path, "os") {
            match expr.tags[i].args[0].kind {
                ExprKind:StringLit(str value) {
                    #raw("#if defined _WIN32")
                    if cstr:cmp(value.buf, "win") != 0 {
                        ret;
                    };
                    #raw("#elif defined __linux__")
                    if cstr:cmp(value.buf, "linux") != 0 {
                        ret;
                    };
                    #raw("#elif defined __APPLE__")
                    if cstr:cmp(value.buf, "mac") != 0 {
                        ret;
                    };
                    #raw("#endif") fmt:print("");
                },
            };
        } elif cmp_path_to_str(expr.tags[i].path, "req") {
            match expr.tags[i].args[0].kind {
                ExprKind:StringLit(str value) {
                    register_req(value);
                },
            };
        } elif cmp_path_to_str(expr.tags[i].path, "raw") {
            match expr.tags[i].args[0].kind {
                ExprKind:StringLit(str value) {
                    dstr:push(out, '\n');
                    dstr:join(out, value);
                    dstr:push(out, '\n');
                },
            };
        } elif cmp_path_to_str(expr.tags[i].path, "bind") {
            ret;
        };
    };

    match expr.label {
        opt<str>:Some(str label) {
            dstr:join(out, label);
            dstr:push(out, ':');
        },
    };

    match expr.kind {
        ExprKind:Block(darr<Expr> body) {
            generate_expr_vec(out, body, false, false, false);
        },
        ExprKind:Mod(Path path, darr<Expr> body) {
            generate_expr_vec(out, body, false, false, false);
        },
        ExprKind:Field(Path _type, str name) {
            opt<str> type_name = mangle(_type, false);
            dstr:join(out, opt<str>:unwrap(type_name$));
            dstr:push(out, ' ');
            if semicolon {
                dstr:join(out, name);
            } else {
                if cstr:cmp(name.buf, "this") == 0 {
                    dstr:join_cstr(out, "this");
                } else {
                    dstr:join(out, mangle_local(name));
                };
            };
            if semicolon {
                dstr:push(out, ';');
            } elif last == false {
                dstr:push(out, ',');
            };
        },
        ExprKind:Comp(Path path, darr<Expr> fields, darr<Expr> body) {
            bool has_gens = has_generics(path);
            if (gens.len == 0) & has_gens {
                ret;
            };
            opt<str> name = mangle(path, has_gens);
            if has_gens & (name == opt<str>:None) {
                ret;
            };
            str _name = opt<str>:unwrap(name$);

            dstr:join_cstr(types_headers$, "typedef struct ");
            dstr:join(types_headers$, _name);
            dstr:push(types_headers$, ' ');
            dstr:join(types_headers$, _name);
            dstr:push(types_headers$, ';');

            dstr comp_out = dstr:new_with_cap(128);
            dstr:join_cstr(comp_out$, "typedef struct ");
            dstr:join(comp_out$, _name);
            dstr:push(comp_out$, '{');
            generate_expr_vec(comp_out$, fields, true, false, false);
            dstr:push(comp_out$, '}');
            dstr:join(comp_out$, _name);
            dstr:push(comp_out$, ';');
            dstr:join(types$, comp_out.to_str());
            mem:free(comp_out.buf);

            generate_expr_vec(out, body, true, false, true);
        },
        ExprKind:Sum(Path path, darr<Expr> opts, darr<Expr> body) {
            bool has_gens = has_generics(path);
            if (gens.len == 0) & has_gens {
                ret;
            };
            opt<str> name = mangle(path, has_gens);
            if has_gens & (name == opt<str>:None) {
                ret;
            };
            str _name = opt<str>:unwrap(name$);

            dstr:join_cstr(types_headers$, "typedef struct ");
            dstr:join(types_headers$, _name);
            dstr:push(types_headers$, ' ');
            dstr:join(types_headers$, _name);
            dstr:push(types_headers$, ';');

            dstr enum_out = dstr:new_with_cap(256);
            generate_expr_vec(enum_out$, opts, false, false, false);
            dstr:join_cstr(enum_out$, "typedef struct ");
            dstr:join(enum_out$, _name);
            dstr:push(enum_out$, '{');
            dstr:join_cstr(enum_out$, "int t;union{");
            for i = 0, i < opts.len, i += 1 {
                Path path;
                match opts[i].kind {
                    ExprKind:Comp(Path _path, darr<Expr> fields, darr<Expr> body) {
                        path = _path;
                    },
                    ExprKind:Sum(Path _path, darr<Expr> opts, darr<Expr> body) {
                        path = _path;
                    },
                    ExprKind:VarUse(Path _path) {
                        path = _path;
                    },
                };
                opt<str> type_name = mangle(path, false);
                dstr:join(enum_out$, type_name.unwrap());
                dstr:push(enum_out$, ' ');
                dstr:join(enum_out$, _name);
                dstr:push(enum_out$, ';');
            };
            dstr:join_cstr(enum_out$, "}u;}");
            dstr:join(enum_out$, _name);
            dstr:push(enum_out$, ';');
            dstr:join(types$, enum_out.to_str());
            mem:free(enum_out.buf);

            generate_expr_vec(out, body, true, false, true);
        },
        ExprKind:Trait(Path path, darr<Expr> body) {},
        ExprKind:Def(Path _trait, opt<Path> target, darr<Expr> body) {
            generate_expr_vec(out, body, false, false, false);
        },
        ExprKind:ProcDef(opt<Path> ret_type, Path path, darr<Expr> args, darr<Expr> body) {
            int old_local_vars_len = local_vars.len;

            bool has_gens = has_generics(path);
            if (gens.len == 0) & has_gens {
                ret;
            };

            opt<str> name = mangle(path, has_gens);
            if has_gens & (name == opt<str>:None) {
                ret;
            };
            str _name = opt<str>:unwrap(name$);

            dstr proc_out = dstr:new_with_cap(256);
            match ret_type {
                opt<Path>:Some(Path __ret_type) {
                    opt<str> ___ret_type = mangle(__ret_type, false);
                    dstr:join(proc_out$, ___ret_type.unwrap());
                    dstr:push(proc_out$, ' ');
                },
                opt<Path>:None {
                    dstr:join_cstr(proc_out$, "void ");
                },
            };
            dstr:join(proc_out$, _name);
            dstr:push(proc_out$, '(');

            bool is_self = false;
            bool is_rest = false;
            for i = 0, i < expr.tags.len, i += 1 {
                if cmp_path_to_str(expr.tags[i].path, "self") {
                    is_self = true;
                } elif cmp_path_to_str(expr.tags[i].path, "rest") {
                    is_rest = true;
                    register_req(str:new_from_cstr("stdarg.h"));
                };
            };
            if is_self {
                darr<Expr> _args = darr<Expr>:new_with_cap(args.len + 1);
                mem:copy(_args.buf + 1, args.buf, mem:size<Expr>() * args.len);
                _args.len = args.len + 1;
                Path this_ptr = new Path {
                    parts = darr<PathPart>:new_with_cap(2),
                };
                darr<Expr> this_ptr_gens = darr<Expr>:new_with_cap(1);
                path.parts.len -= 1;
                darr<Expr>:push(this_ptr_gens$, new Expr {
                    kind = ExprKind:VarUse(path),
                });
                path.parts.len += 1;
                this_ptr.parts[0] = new PathPart {
                    name = str:new_from_cstr("ptr"),
                    gens = this_ptr_gens,
                };
                this_ptr.parts.len = 1;
                _args[0] = new Expr {
                    kind = ExprKind:Field(
                        this_ptr,
                        str:new_from_cstr("this"),
                    ),
                    tags = new darr<Tag> { len = 0 },
                    label = opt<str>:None,
                };
                generate_expr_vec(proc_out$, _args, false, false, false);
            } else {
                generate_expr_vec(proc_out$, args, false, false, false);
            };
            if is_rest {
                dstr:join_cstr(proc_out$, ",...");
            };
            
            dstr:join(funcs_headers$, proc_out.to_str());
            dstr:join_cstr(funcs_headers$, ");");

            dstr:join_cstr(proc_out$, "){");
            generate_expr_vec(proc_out$, body, true, false, true);
            dstr:join_cstr(proc_out$, "};");
            dstr:join(funcs$, proc_out.to_str());
            mem:free(proc_out.buf);

            local_vars.len = old_local_vars_len;
        },
        ExprKind:VarDef(opt<Path> _type, Path path, opt<ptr<Expr>> value) {
            Path __type = opt<Path>:unwrap(_type$);
            opt<str> ___type = mangle(__type, false);
            dstr:join(variables$, ___type.unwrap());
            dstr:push(variables$, ' ');
            opt<str> _path = mangle(path, false);
            dstr:join(variables$, _path.unwrap());
            match value {
                opt<ptr<Expr>>:Some(ptr<Expr> _value) {
                    dstr:push(variables$, '=');
                    generate_expr(variables$, _value@, false, false, 0);
                },
            };
            dstr:push(variables$, ';');
        },
        ExprKind:LocalVarDef(opt<Path> _type, str name, opt<ptr<Expr>> value) {
            Path __type = opt<Path>:unwrap(_type$);
            opt<str> ___type = mangle(__type, false);
            dstr:join(out, ___type.unwrap());
            dstr:push(out, ' ');
            dstr:join(out, mangle_local(name));
            match value {
                opt<ptr<Expr>>:Some(ptr<Expr> _value) {
                    dstr:push(out, '=');
                    generate_expr(out, _value@, false, false, 0);
                },
            };
            dstr:push(out, ';');
        },
        ExprKind:ProcCall(Path path, darr<Expr> args) {
            if ((((path.parts.len == 2) & (path.parts[0].gens.len == 0)) & (path.parts[1].gens.len == 1)) & (cstr:cmp(path.parts[0].name.buf, "mem") == 0)) & (cstr:cmp(path.parts[1].name.buf, "size") == 0) {
                dstr:join_cstr(out, "sizeof(");
                match path.parts[1].gens[0].kind {
                    ExprKind:VarUse(Path gen) {
                        opt<str> gen_name = mangle(gen, false);
                        dstr:join(out, gen_name.unwrap());
                    },
                };
                dstr:push(out, ')');
            } else {
                opt<str> path_name = mangle(path, false);
                dstr:join(out, path_name.unwrap());
                dstr:push(out, '(');
                generate_expr_vec(out, args, false, true, false);
                dstr:push(out, ')');
            };
            if semicolon {
                dstr:push(out, ';');
            };
        },
        ExprKind:VarUse(Path path) {
            opt<str> path_name = mangle(path, false);
            dstr:join(out, path_name.unwrap());
            if semicolon {
                dstr:push(out, ';');
            };
        },
        ExprKind:StringLit(str value) {
            dstr:push(out, '"');
            dstr:join(out, value);
            dstr:push(out, '"');
        },
        ExprKind:CharLit(str value) {
            dstr:push(out, 39);
            dstr:join(out, value);
            dstr:push(out, 39);
        },
        ExprKind:IntLit(str value) {
            dstr:join(out, value);
        },
        ExprKind:FloatLit(str value) {
            dstr:join(out, value);
        },
        ExprKind:ThisLit {
            dstr:join_cstr(out, "(*this)");
        },
        ExprKind:LocalBlock(darr<Expr> body) {
            dstr:push(out, '{');
            generate_expr_vec(out, body, true, false, true);
            dstr:push(out, '}');
        },
        ExprKind:If(IfBranch _if, darr<IfBranch> _elif, opt<ElseBranch> _else) {
            dstr:join_cstr(out, "if(");
            generate_expr(out, _if.cond@, false, false, 0);
            dstr:join_cstr(out, "){");
            generate_expr_vec(out, _if.body, true, false, true);
            dstr:push(out, '}');
            for i = 0, i < _elif.len, i += 1 {
                dstr:join_cstr(out, "else if(");
                generate_expr(out, _elif[i].cond@, false, false, 0);
                dstr:join_cstr(out, "){");
                generate_expr_vec(out, _elif[i].body, true, false, true);
                dstr:push(out, '}');
            };
            match _else {
                opt<ElseBranch>:Some(ElseBranch __else) {
                    dstr:join_cstr(out, "else{");
                    generate_expr_vec(out, __else.body, true, false, true);
                    dstr:push(out, '}');
                },
            };
        },
        ExprKind:Loop(darr<Expr> body) {
            dstr:join_cstr(out, "for(;;){");
            generate_expr_vec(out, body, true, false, true);
            match expr.label {
                opt<str>:Some(str label) {
                    dstr:join_cstr(out, "__");
                    dstr:join(out, label);
                    dstr:push(out, ':');
                },
            };
            dstr:push(out, '}');
        },
        ExprKind:While(ptr<Expr> cond, darr<Expr> body) {
            dstr:join_cstr(out, "while(");
            generate_expr(out, cond@, false, false, 0);
            dstr:join_cstr(out, "){");
            generate_expr_vec(out, body, true, false, true);
            match expr.label {
                opt<str>:Some(str label) { 
                    dstr:join_cstr(out, "__");
                    dstr:join(out, label);
                    dstr:push(out, ':');
                },
            };
            dstr:push(out, '}');
        },
        ExprKind:For(str iter, opt<ptr<Expr>> iter_value, ptr<Expr> cond, ptr<Expr> _next, darr<Expr> body) {
            int old_local_vars_len = local_vars.len;

            dstr:join_cstr(out, "for(int ");
            dstr:join(out, mangle_local(iter));
            match iter_value {
                opt<ptr<Expr>>:Some(ptr<Expr> _iter_value) {
                    dstr:push(out, '=');
                    generate_expr(out, _iter_value@, false, false, 0);
                },
            };
            dstr:push(out, ';');
            generate_expr(out, cond@, false, false, 0);
            dstr:push(out, ';');
            generate_expr(out, _next@, false, false, 0);
            dstr:join_cstr(out, "){");
            match expr.label {
                opt<str>:Some(str label) {
                    dstr:join_cstr(out, "__");
                    dstr:join(out, label);
                    dstr:push(out, ':');
                },
            };
            generate_expr_vec(out, body, true, false, false);
            dstr:push(out, '}');

            local_vars.len = old_local_vars_len;
        },
        ExprKind:Each(darr<str> vars, ptr<Expr> iter, darr<Expr> body) {},
        ExprKind:Match(ptr<Expr> value, darr<Expr> cases) {},
        ExprKind:Case(darr<Expr> values, darr<Expr> body) {},
        ExprKind:Ret(opt<str> label, opt<ptr<Expr>> value) {
            match label {
                opt<str>:Some(str _label) {
                    dstr:join_cstr(out, "goto __");
                    dstr:join(out, _label);
                },
                _ {
                    dstr:join_cstr(out, "return");
                },
            };
            match value {
                opt<ptr<Expr>>:Some(ptr<Expr> _value) {
                    dstr:push(out, ' ');
                    generate_expr(out, _value@, false, false, 0);
                }, 
            };
            dstr:push(out, ';');
        },
        ExprKind:Next(str label) {
            dstr:join_cstr(out, "goto _");
            dstr:join(out, label);
            dstr:push(out, ';');
        },
        ExprKind:Jump(str label) {
            dstr:join_cstr(out, "goto ");
            dstr:join(out, label);
            dstr:push(out, ';');
        },
        ExprKind:Try(opt<str> label, ptr<Expr> value) {},
        ExprKind:UnaryOp(ptr<Expr> value, TokenKind kind) {
            dstr:push(out, '(');
            match kind {
                TokenKind:Subtract {
                    dstr:push(out, '-');
                },
                TokenKind:Not {
                    dstr:push(out, '!');
                },
                TokenKind:Deref {
                    dstr:push(out, '*');
                },
                TokenKind:Address {
                    dstr:push(out, '&');
                },
            };
            generate_expr(out, value@, false, false, parens + 1);
            dstr:push(out, ')');
        },
        ExprKind:BinaryOp(ptr<Expr> lhs, ptr<Expr> rhs, TokenKind kind) {
            if parens > 0 {
                dstr:push(out, '(');
            };

            ~m match kind {
                TokenKind:As {
                    dstr:push(out, '(');
                    generate_expr(out, rhs@, false, false, parens + 1);
                    dstr:push(out, ')');
                    generate_expr(out, lhs@, false, false, parens + 1);
                },
                _ {
                    generate_expr(out, lhs@, false, false, parens + 1);
                    match kind {
                        TokenKind:Assign {
                            dstr:push(out, '=');
                        },
                        TokenKind:Equal {
                            dstr:join_cstr(out, "==");
                        },
                        TokenKind:And {
                            dstr:join_cstr(out, "&&");
                        },
                        TokenKind:Or {
                            dstr:join_cstr(out, "||");
                        },
                        TokenKind:Less {
                            dstr:push(out, '<');
                        },
                        TokenKind:LessEqual {
                            dstr:join_cstr(out, "<=");
                        },
                        TokenKind:Greater {
                            dstr:push(out, '>');
                        },
                        TokenKind:GreaterEqual {
                            dstr:join_cstr(out, ">=");
                        },
                        TokenKind:Add {
                            dstr:push(out, '+');
                        },
                        TokenKind:AddAssign {
                            dstr:join_cstr(out, "+=");
                        },
                        TokenKind:Subtract {
                            dstr:push(out, '-');
                        },
                        TokenKind:SubtractAssign {
                            dstr:join_cstr(out, "-=");
                        },
                        TokenKind:Multiply {
                            dstr:push(out, '*');
                        },
                        TokenKind:MultiplyAssign {
                            dstr:join_cstr(out, "*=");
                        },
                        TokenKind:Divide {
                            dstr:push(out, '/');
                        },
                        TokenKind:DivideAssign {
                            dstr:join_cstr(out, "/=");
                        },
                        TokenKind:Modulo {
                            dstr:push(out, '%');
                        },
                        TokenKind:ModuloAssign {
                            dstr:join_cstr(out, "%=");
                        },
                        TokenKind:NotEqual {
                            dstr:join_cstr(out, "!=");
                        },
                        TokenKind:Dot {
                            dstr:push(out, '.');
                            match rhs@.kind {
                                ExprKind:VarUse(Path path) {
                                    dstr:join(out, path.parts[0].name);
                                },
                            };
                            ret ~m;
                        },
                        TokenKind:LeftBracket {
                            dstr:push(out, '[');
                        },
                    };
                    generate_expr(out, rhs@, false, false, parens + 1);
                    match kind {
                        TokenKind:LeftBracket {
                            dstr:push(out, ']');
                        },
                    };
                },
            };

            if parens > 0 {
                dstr:push(out, ')');
            };
            if semicolon > 0 {
                dstr:push(out, ';');
            };
        },
        ExprKind:TernaryOp(ptr<Expr> cond, ptr<Expr> valueA, ptr<Expr> valueB) {
            generate_expr(out, cond@, false, false, parens + 1);
            dstr:push(out, '?');
            generate_expr(out, valueA@, false, false, parens + 1);
            dstr:push(out, ':');
            generate_expr(out, valueB@, false, false, parens + 1);
        },
    };
    
    match expr.label {
        opt<str>:Some(str label) {
            dstr:push(out, '_');
            dstr:join(out, label);
            dstr:push(out, ':');
        },
    };
};

sub register_req(str name) {
    for i = 0, i < reqs.len, i += 1 {
        if cstr:cmp(reqs[i].buf, name.buf) == 0 {
            ret;
        };
    };
    reqs.push(name);
};

Path apply_generics(Path path) {
    if path.parts.len == 1 {
        for i = 0, i < gens.len, i += 1 {
            if cstr:cmp(gens[i].name.buf, path.parts[0].name.buf) == 0 {
                match gens[i].expr.kind {
                    ExprKind:VarUse(Path gen) {
                        ret gen;
                    },
                };
            };
        };
    };
    Path new_path = path.clone();
    for i = 0, i < path.parts.len, i += 1 {
        PathPart part = path.parts[i];
        new_path.parts[i].gens = darr<Expr>:new_with_cap(part.gens.len);
        new_path.parts[i].gens.len = part.gens.len;
        for ii = 0, ii < part.gens.len, ii += 1 {
            match part.gens[ii].kind {
                ExprKind:TypeField(str gen) {
                    for iii = 0, iii < gens.len, iii += 1 {
                        if cstr:cmp(gens[iii].name.buf, gen.buf) == 0 {
                            match gens[iii].expr.kind {
                                ExprKind:VarUse(Path _gen) {
                                    new_path.parts[i].gens[ii] = new Expr {
                                        kind = ExprKind:VarUse(_gen),
                                    };
                                },
                            };
                        };
                    };
                },
                ExprKind:VarUse(Path gen) {
                    new_path.parts[i].gens[ii] = new Expr {
                        kind = ExprKind:VarUse(apply_generics(gen)),
                    };
                },
            };
        };
    };
    ret new_path;
};

opt<str> mangle(Path path, bool is_new) {
    path = apply_generics(path);

    int ptr_count = 0;
    while (path.parts[0].gens.len == 1) & cmp_path_to_str(path, "ptr") {
        match path.parts[0].gens[0].kind {
            ExprKind:VarUse(Path gen) {
                path = gen;
            },
        };
        ptr_count += 1;
    };

    for i = 0, i < path.parts.len, i += 1 {
        for ii = 0, ii < path.parts[i].gens.len, ii += 1 {
            match path.parts[i].gens[ii].kind {
                ExprKind:VarUse(Path gen) {
                    mangle(gen, false);
                },
            };
        };
    };

    if (path.parts.len == 1) & (path.parts[0].gens.len == 0) {
        if cstr:cmp(path.parts[0].name.buf, "main") == 0 {
            ret opt<str>:Some(str:new_from_cstr("main"));
        };

        for i = local_vars.len - 1, i >= 0, i -= 1 {
            if cstr:cmp(path.parts[0].name.buf, local_vars[i].buf) == 0 {
                dstr n = mangle_from_index(i + 1, true);
                ret opt<str>:Some(dstr:to_str(n$));
            };
        };
    };

    darr<MangledExpr> len_paths = paths[path.parts.len - 1];
    for i = 0, i < len_paths.len, i += 1 {
        Path other = len_paths[i].path;
        if compare_paths(path, other, false) {
            if (is_new == false) & (ptr_count == 0) & has_generics(other) {
                int old_gens_len = gens.len;
                for ii = 0, ii < other.parts.len, ii += 1 {
                    PathPart part = other.parts[ii];
                    for iii = 0, iii < other.parts[ii].gens.len, iii += 1 {
                        match part.gens[iii].kind {
                            ExprKind:TypeField(str name) {
                                gens.push(new GenericInstance {
                                    name = name,
                                    expr = path.parts[ii].gens[iii],
                                });
                            },
                        };
                    };
                };
                generate_expr(0, len_paths[i].expr, false, false, 0);
                gens.len = old_gens_len;
            };

            len_paths = paths[path.parts.len - 1];
            for i = 0, i < len_paths.len, i += 1 {
                if compare_paths(path, len_paths[i].path, true) {
                    if is_new {
                        ret opt<str>:None;
                    } else {
                        ret opt<str>:Some(add_ptr(len_paths[i].name, ptr_count));
                    };
                };
            };

            ret opt<str>:Some(add_ptr(new_mangle(new Expr {}, path, true), ptr_count));
        };
    };
};

str add_ptr(str name, int ptr_count) {
    if ptr_count == 0 {
        ret name;
    };
    dstr ptr_name = dstr:new_with_cap(name.len + ptr_count);
    ptr_name.join(name);
    for i = 0, i < ptr_count, i += 1 {
        ptr_name.push('*');
    };
    ret ptr_name.to_str();
};

str mangle_local(str name) {
    local_vars.push(name);
    dstr n = mangle_from_index(local_vars.len, true);
    ret dstr:to_str(n$);
};