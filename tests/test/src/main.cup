` lexer
    ` raw strings
` parser
    ` Path -> Expr
    ` PathPart -> Expr
    ` new enum body parsing
` analyzer
    ` local
        ` [✓] binds
        ` [✓] check if path defined and visible
            ` [✓] is_var
            ` [✓] is_type
            ` [✓] is_sub
        ` [] check number of args for
            ` [] tag
            ` [] sub_call
            ` [] enum_inst
            ` [] comp_inst
        ` [] check type
            ` [] when assigning check if type matches
            ` [] when giving to sub_call check
            ` [] when giving to comp_inst
            ` [] when giving to enum_inst
            ` [] when ops
        ` [] check if label defined
        ` [] check if comp_inst fields exist
        ` [] apply transformations
            ` [] custom ops
            ` [] enum_inst (==, !=)
            ` [] #self
                ` [] this
                ` [] sub_calls (.)
        ` [] type inference for var_defs
` generator
` playground
    ` multiple files
    ` line numbers
` language server
    ` parser error tolerance
` parser
    ` combo ops
    ` combo var_defs

sub foo() {
    echo 1 + 1;
};

comp int ();

mod a {

    echo b:c:d;

    mod b {
        int c;
    };

    mod b:c {
        #pub int d;
    };

};