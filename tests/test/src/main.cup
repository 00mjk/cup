` general
    ` [?] this, This, #self
    ` [?] def, defer 
    ` [?] #where
    ` [?] defer as a keyword not #defer
    ` [?] rename '|' -> '^' (^ is next to &)
    ` [?] #mut
` lexer
    ` [] add @=
    ` [] raw strings
    ` [] string interpolation ($, $(abc + 2))
` parser
    ` [] Path -> Expr
    ` [] chaining ops
    ` [?] combo var_defs
    ` [?] combo match/case
` analyzer
    ` [] type inference
    ` [] check number of args for
        ` [] tag
        ` [] proc_call
        ` [] enum_inst
    ` [] check type
        ` [] when assigning check if type matches
        ` [] when giving to proc_call check
        ` [] when ops
    ` [] check if label defined
    ` [] apply transformations
        ` [] auto deref and address
        ` [] custom ops
        ` [] enum compare == !=
        ` [] #self
            ` [] check if its allowed for currrent expr
            ` [+] this
            ` [] proc_calls (.)
        ` [] try keyword
    ` [] generic aliases
` generator
    ` [] mangle labels

comp SomeComp (int a) {
    #pub int foo () {

    };
};

proc main () {
    ` SomeComp:foo();
    foo:abc();
};